// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../../../node_modules/.pnpm/@prisma+client@5.22.0_prisma@5.22.0/node_modules/.prisma/client/"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  STUDENT
  TEACHER
}

enum RoomParticipantRole {
  HOST
  PARTICIPANT
}

model User {
  id                  String    @id @default(cuid())
  name                String?
  email               String    @unique
  emailVerified       DateTime?
  image               String?
  accounts            Account[]
  password            String?
  role                Role      @default(STUDENT)
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
  spotifyRefreshToken String?

  rooms                Room[]
  roomParticipants     RoomParticipant[]
  chats                Chat[]
  roomSessionHistories RoomSessionHistory[]
  pomodoroSessions     PomodoroSession[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model VerificationToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verification_tokens")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("password_reset_tokens")
}

model Room {
  id              String   @id @default(cuid())
  name            String
  isPrivate       Boolean? @default(false)
  ownerId         String
  createdAt       DateTime @default(now())
  maxParticipants Int?

  participants       RoomParticipant[]
  chats              Chat[]
  roomSessionHistory RoomSessionHistory[]

  owner User @relation(fields: [ownerId], references: [id])
}

model RoomParticipant {
  id       String              @id @default(cuid())
  joinedAt DateTime            @default(now())
  role     RoomParticipantRole
  roomId   String
  userId   String
  name     String?

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
}

model Chat {
  id        String   @id @default(cuid())
  message   String
  senderId  String
  roomId    String
  createdAt DateTime @default(now())

  room   Room @relation(fields: [roomId], references: [id])
  sender User @relation(fields: [senderId], references: [id])
}

model RoomSessionHistory {
  id       String @id @default(cuid())
  roomId   String
  userId   String
  duration Int    @default(0)

  room Room @relation(fields: [roomId], references: [id])
  user User @relation(fields: [userId], references: [id])

  @@unique([roomId, userId])
}

model PomodoroSession {
  id        String   @id @default(cuid())
  userId    String
  duration  Int
  createdAt DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}
